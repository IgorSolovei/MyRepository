//1. Какой будет результат выполнения этого кода?
let x = 10;
alert(x++);
// Ответ 10 постфиксная форма x++ также увеличивает x, но возвращает старое значение.*/

/*2. В чем разница между == и === ? Операнды разных типов преобразуются оператором == к числу.
Оператор строгого равенства === проверяет равенство без приведения типов.*/

/*3. Чему равно выражение: Ответ NaN. я предполагаю потому что значения этого выражения станут 
NaN после попытки преобразования к числу.*/
[] + false - null + true;

/*4. В чем разница между переменными, созданными при помощи let, var и const ?
Область видимости переменной let – блок {...}.
Переменная же, объявленная через var, видна везде в функции.
Объявление const задаёт константу, то есть переменную, которую нельзя менять:*/

/*5. Какой будет результат выполнения этого кода ? 
Ответ 15. Преоброзование к строке. так как пустой массив преобразовывается в пустую строку.*/
alert([] + 1 + 5);

//6. Какой будет результат выполнения этого кода ? Ответ 1. берется символ по индексу.
alert("1"[0])

// 7. Какой будет результат выполнения этого кода ? Ответ undefined. так как не приведет его к числу и вернет false.
alert(5 && 1 && undefined && 0);

/*8. Есть ли разница между выражениями: Ответ : !! выполняет двойное преображение типов и при выводе !!(x && y) получим булевое значение true или false в зависимости от присвоенных значений х и у
при выводе (x && y) получим первое ложное значение*/
!!(x && y) и(x && y) ?

  /*9. Какой будет результат выполнения этого кода ? Ответ 3.приоритет && выше чем || поэтому вернет вернет && вернет 3 и 
  выражение null||3 вернет 3*/
  alert(null || 2 && 3);

//10. Правда ли что arr1 == arr2 ? Ответ нет. сравниваются ссылки на объекты.
arr1 = [10, 100, 1000];
arr2 = [10, 100, 1000];

/*11. Какой будет результат выполнения этого кода ? 
Ответ Infinity.так как + конвертирует к числу Infinity
 которое является числовым значением представляющим бесконечность.*/
alert(+"Infinity");

/*12. Какой будет результат выполнения этого кода ? Ответ 10.base + num = 1+1
let addOne в итоге 2*/
function addBase(base) {
  return function (num) {
    return base + num;
  };
}
let addOne = addBase(1);
alert(addOne(5) + addOne(3));

//13. Какой будет результат выполнения этого кода ? Ответ 1.
let showNum = (value) => value ? alert(1) : alert(0);
showNum("false");

/*14. Чему равно выражение: Ответ 9px. так как первые цифры они суммируются 
и потом конкатенируются со строкой.*/
4 + 5 + "px"

/*15. Какой будет результат выполнения этого кода ? 
Ответ NaN.так как вторая переменная объявлена позже.*/
var x = 3;
console.log(x / y);
var y = 10